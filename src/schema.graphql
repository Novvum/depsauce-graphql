# import * from "./generated/prisma.graphql"

type Query {
	getContributors(
		platform: PlatformType!
		projectName: String!
		options: PaginationOptions
	): [Contributor]
	getDependendentRepositories(
		platform: PlatformType!
		projectName: String!
		options: PaginationOptions
	): [Repository]
	getDependendents(
		platform: PlatformType!
		projectName: String!
		options: PaginationOptions
	): [Project]
	getProject(
		platform: PlatformType!
		projectName: String!
		projectVersion: String
	): Project
	getSourceRank(platform: PlatformType!, projectName: String!): ProjectUsage
	getUsage(platform: PlatformType!, projectName: String!): ProjectUsage
	search(query: String!, options: SearchOptions): [Project]
	getPlatforms(options: PaginationOptions): [Platform]
	githubRepository: GithubRepository
	githubUser: GithubUser
}

type GithubRepository {
	getRepository(
		repositoryOwner: String!
		repositoryName: String!
		withDependencies: Boolean
	): Repository
	getProjects(
		repositoryOwner: String!
		repositoryName: String!
		options: PaginationOptions
	): [Project]
}

type GithubUser {
	getUser(username: String!): Contributor
	getRepositories(username: String!, options: PaginationOptions): [Repository]
	getProjects(username: String!, options: PaginationOptions): [Project]
	getContributedProjects(
		username: String!
		options: PaginationOptions
	): [Project]
	getContributedRepositories(
		username: String!
		options: PaginationOptions
	): [Repository]
	getDependencies(
		username: String!
		platform: PlatformType
		options: PaginationOptions
	): [Project]
}

input SearchOptions {
	page: Int
	perPage: Int
	sortBy: SortType
	filter: FilterOptions
}

input PaginationOptions {
	page: Int
	perPage: Int
}

type Subscription {
	include_prerelease: Boolean
	created_at: String
	updated_at: String
	project: Project
}

type Contributor {
	bio: String
	blog: String
	company: String
	created_at: String!
	email: String
	followers: Int!
	following: Int!
	github_id: String!
	hidden: Boolean
	host_type: String!
	last_synced_at: String!
	location: String
	login: String!
	name: String!
	updated_at: String!
	user_type: String!
	uuid: String!
}

type Project {
	dependent_repos_count: Int!
	dependents_count: Int!
	description: String
	forks: Int!
	homepage: String
	keywords: [String!]
	language: String
	latest_download_url: String
	latest_release_number: String
	latest_release_published_at: String
	latest_stable_release: ProjectRelease
	name: String
	normalized_licenses: [String!]
	package_manager_url: String
	platform: String
	rank: Int!
	repository_url: String
	stars: Int!
	status: String
	versions: [ProjectVersion!]
	dependencies_for_version: String
	dependencies: [ProjectDependency]
}

type ProjectUsage {
	basic_info_present: Int!
	repository_present: Int!
	readme_present: Int!
	license_present: Int!
	versions_present: Int!
	follows_semver: Int!
	recent_release: Int!
	not_brand_new: Int!
	one_point_oh: Int!
	dependent_projects: Int!
	dependent_repositories: Int!
	stars: Int!
	contributors: Int!
	subscribers: Int!
	all_prereleases: Int!
	any_outdated_dependencies: Int!
	is_deprecated: Int!
	is_unmaintained: Int!
	is_removed: Int!
}

enum ProjectDependencyKind {
	Development
	runtime
	Optional
}

type ProjectDependency {
	deprecated: Boolean
	filepath: String
	kind: ProjectDependencyKind
	latest_stable: String
	latest: String
	name: String
	outdated: Boolean
	platform: PlatformType
	project_name: String
	requirements: String
}

type ProjectRelease {
	created_at: String
	id: Int!
	number: String
	project_id: Int!
	published_at: String
	runtime_dependencies_count: Int
	updated_at: String
}

type ProjectUsage {
	version: String
	usage: Int!
}

type ProjectVersion {
	published_at: String
	number: String
}

type Repository {
	contributions_count: Int
	created_at: String
	default_branch: String
	description: String
	fork_policy: String
	fork: Boolean
	forks_count: Int
	full_name: String
	github_contributions_count: Int
	github_id: String
	has_audit: String
	has_changelog: String
	has_coc: String
	has_contributing: String
	has_issues: Boolean
	has_license: String
	has_pages: Boolean
	has_readme: String
	has_threat_model: String
	has_wiki: Boolean
	homepage: String
	host_domain: String
	host_type: String
	keywords: [String]
	language: String
	last_synced_at: String
	license: String
	logo_url: String
	mirror_url: String
	name: String
	open_issues_count: Int
	private: Boolean
	pull_requests_enabled: String
	pushed_at: String
	rank: Int
	scm: String
	size: Int
	source_name: String
	stargazers_count: Int
	status: String
	subscribers_count: Int
	updated_at: String
	uuid: String
	dependencies: [ProjectDependency]
}

enum SortType {
	contributions_count
	created_at
	dependent_repos_count
	dependents_count
	latest_release_published_at
	rank
	stars
}

input FilterOptions {
	keywords: [String!]
	languages: [String!]
	licenses: [String!]
	platforms: [PlatformType!]
}

type Platform {
	color: String
	default_language: String
	homepage: String
	name: String
	project_count: Int
}

enum PlatformType {
	alcatraz
	atom
	bower
	cargo
	carthage
	clojars
	cocoapods
	cpan
	cran
	dub
	elm
	emacs
	go
	hackage
	haxelib
	hex
	homebrew
	inqlude
	julia
	maven
	meteor
	nimble
	npm
	nuget
	packagist
	platformio
	pub
	puppet
	purescript
	pypi
	racket
	rubygems
	sublime
	swiftpm
	wordpress
}
