# npms.io api schema

type Popularity {
	communityInterest: Int
	dependentsCount: Int
	downloadsAcceleration: Int
	downloadsCount: Int
}

type Quality {
	branding: Int
	carefulness: Int
	health: Int
	tests: Int
}

type Maintenance {
	commitsFrequency: Int
	issuesDistribution: Int
	openIssues: Int
	releasesFrequency: Int
}

type Evaluation {
	maintenance: Maintenance
	popularity: Popularity
	quality: Quality
}

type Files {
	hasNpmIgnore: Boolean
	readmeSize: Int
	testsSize: Int
}

type Urls {
	content: String
	original: String
	service: String
	shields: String
}

type Modifiers {
	branch: String
}

type Info {
	modifiers: Modifiers
	service: String
	type: String
}

type BadgeElement {
	info: Info
	urls: Urls
}

type Source {
	badges: [BadgeElement]
	coverage: [Int]
	files: Files
	linters: [String]
}

type DownloadElement {
	count: Int
	from: String
	to: String
}

type Npm {
	dependentsCount: Int
	downloads: [DownloadElement]
	starsCount: Int
}

type Repository {
	type: String
	url: String
}

type ReleaseElement {
	count: Int
	from: String
	to: String
}

type Metadata {
	date: DateTime
	dependencies: JSON
	bundledDependencies: Boolean
	description: String
	devDependencies: JSON
	hasTestScript: Boolean
	keywords: [String]
	license: String
	links: Links
	maintainers: [MaintainerElement]
	name: String
	publisher: Publisher
	readme: String
	releases: [ReleaseElement]
	repository: Repository
	scope: String
	version: String
}

type StatusElement {
	context: String
	state: String
}

type Issues {
	count: Int
	distribution: JSON
	isDisabled: Boolean
	openCount: Int
}

type ContributorElement {
	commitsCount: Int
	username: String
}

type CommitElement {
	count: Int
	from: String
	to: String
}

type PackageCoordinates {
	analyzedAt: DateTime
	collected: Collected
	evaluation: Evaluation
	score: Score
}

type Collected {
	github: Github
	metadata: Metadata
	npm: Npm
	source: Source
}

type Github {
	commits: [CommitElement]
	contributors: [ContributorElement]
	forksCount: Int
	homepage: String
	issues: Issues
	starsCount: Int
	statuses: [StatusElement]
	subscribersCount: Int
}

input PackageParams {
	name: String
}

input SearchParams {
	from: String
	size: String
}

type SearchCoordinate {
	results: [ResultElement]
	total: Int
}

input Filters {
	author: String
	maintainer: String
	keywords: [String]
	not: [SearchNotType]
	is: [SearchIsType]
	boostExact: Boolean
	scoreEffect: Int
	qualityWeight: Int
	popularityWeight: Int
	maintenanceWeight: Int
}

enum SearchNotType {
	unstable
	insecure
}

enum SearchIsType {
	deprecated
	unstable
	insecure
}

type ResultElement {
	package: Package
	score: Score
	flags: FlagsElement
	searchScore: Float
	highlight: String
}

type FlagsElement {
	deprecated: String
	insecure: Boolean
	unstable: Boolean
}

type Package {
	author: Author
	date: DateTime
	description: String
	keywords: [String]
	links: Links
	maintainers: [MaintainerElement]
	name: String
	publisher: Publisher
	scope: String
	version: String
}

type Author {
	email: String
	name: String
}

type Links {
	bugs: String
	homepage: String
	npm: String
	repository: String
}

type MaintainerElement {
	email: String
	username: String
}

type Publisher {
	email: String
	username: String
}

type Score {
	detail: Detail
	final: Float
}

type Detail {
	maintenance: Float
	popularity: Float
	quality: Float
}
